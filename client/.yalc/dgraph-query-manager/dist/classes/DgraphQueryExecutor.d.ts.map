{"version":3,"sources":["../packages/dgraph-query-manager/src/classes/DgraphQueryExecutor.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAC3C,OAAO,EAAE,KAAK,EAAE,MAAM,SAAS,CAAC;AAKhC,oBAAY,oBAAoB;IAC9B,GAAG,IAAA;IACH,QAAQ,IAAA;IACR,MAAM,IAAA;CACP;AAED,MAAM,WAAW,4BAA4B;IAC3C,UAAU,EAAE,OAAO,CAAC;IACpB,KAAK,EAAE,KAAK,CAAC;IACb,OAAO,CAAC,EAAE,aAAa,CAAC;CACzB;AAED,oBAAY,wBAAwB;IAClC,KAAK,IAAA;IACL,aAAa,IAAA;IACb,IAAI,IAAA;IACJ,UAAU,IAAA;CACX;AAED,qBAAa,mBAAoB,YAAW,4BAA4B;IACtE,UAAU,UAAS;IACnB,KAAK,EAAE,KAAK,CAAC;IACb,OAAO,CAAC,EAAE,aAAa,CAAC;gBAGtB,KAAK,EAAE,KAAK,EACZ,MAAM,CAAC,EAAE,MAAM,EACf,UAAU,UAAQ,EAClB,OAAO,CAAC,EAAE,aAAa;IAWzB;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC,mBAAmB,CAAC,GAAG,GAAG;IASzD;;OAEG;IACG,OAAO,CACX,cAAc,GAAE,oBAA4C,GAC3D,OAAO,CAAC,aAAa,CAAC;IAgDzB;;OAEG;IACG,qBAAqB,IAAI,OAAO,CAAC,aAAa,CAAC;IAmCrD;;;OAGG;IACG,qBAAqB,IAAI,OAAO,CAAC,aAAa,CAAC;IAiCrD;;;OAGG;IACG,oBAAoB,CAAC,OAAO,CAAC,EAAE,aAAa,GAAG,OAAO,CAAC,aAAa,CAAC;CAuB5E","file":"DgraphQueryExecutor.d.ts","sourcesContent":["import {\r\n  DgraphAdapterHttp,\r\n  DgraphAdapterHttp as DgraphAdapter\r\n} from '../adapters';\r\nimport { Serialization } from '../classes';\r\nimport { Query } from './Query';\r\nimport logger from '../logger';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\n\r\nexport enum DgraphConnectionType {\r\n  API,\r\n  REST_API,\r\n  DIRECT\r\n}\r\n\r\nexport interface DgraphQueryExecutorInterface {\r\n  isMutation: boolean;\r\n  query: Query;\r\n  request?: Serialization;\r\n}\r\n\r\nexport enum DgraphQueryExecutorModes {\r\n  Query,\r\n  QueryWithVars,\r\n  Json,\r\n  DeleteJson\r\n}\r\n\r\nexport class DgraphQueryExecutor implements DgraphQueryExecutorInterface {\r\n  isMutation = false;\r\n  query: Query;\r\n  request?: Serialization;\r\n\r\n  constructor(\r\n    query: Query,\r\n    params?: object,\r\n    isMutation = false,\r\n    request?: Serialization\r\n  ) {\r\n    this.isMutation = isMutation;\r\n    this.query = query;\r\n    this.request = request;\r\n    if (params) this.query.params = params;\r\n    if (query.validateParams()) {\r\n      query.injectCustomParams();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds a DgraphQueryExecutor instance from partial params.\r\n   * @param params\r\n   */\r\n  static factory(params: Partial<DgraphQueryExecutor> | any) {\r\n    return new DgraphQueryExecutor(\r\n      params.query,\r\n      params.query.params,\r\n      params.isMutation,\r\n      params.request\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute Dgraph query based on instance properties and configuration.\r\n   */\r\n  async execute(\r\n    connectionType: DgraphConnectionType = config.connectionType\r\n  ): Promise<Serialization> {\r\n    let serialization;\r\n    if (connectionType === DgraphConnectionType.REST_API) {\r\n      serialization = await this.executeRestApiRequest();\r\n    } else if (connectionType === DgraphConnectionType.API) {\r\n      serialization = await this.executeJsonApiRequest();\r\n    } else {\r\n      // Default to direct.\r\n      serialization = await this.executeDirectRequest(this.request);\r\n    }\r\n\r\n    // Assume singular array of 'data' if not included.\r\n    const tree =\r\n      this.query.tree && this.query.tree.length > 0\r\n        ? this.query.tree\r\n        : new Array(['data']);\r\n\r\n    if (serialization.response) {\r\n      let combinedResponse: any[] = [];\r\n      for (const branch of tree) {\r\n        let branchResponse = serialization.response;\r\n        for (const stick of branch) {\r\n          if (branchResponse[stick]) {\r\n            branchResponse = branchResponse[stick];\r\n          }\r\n        }\r\n        // Combines all previous arrays with new response array to generate full result set.\r\n        combinedResponse = combinedResponse.concat(branchResponse);\r\n      }\r\n      serialization.message = `No ${this.query.objectType} found.`;\r\n\r\n      // Flatten arrays\r\n      serialization.response = DgraphAdapterHttp.flattenArrays(\r\n        combinedResponse ? combinedResponse : serialization.response\r\n      );\r\n      if (\r\n        !Array.isArray(serialization.response) ||\r\n        (Array.isArray(serialization.response) &&\r\n          serialization.response.length > 0)\r\n      ) {\r\n        serialization.message = `${this.query.objectType} found.`;\r\n        serialization.success = true;\r\n      }\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Makes a REST API query request via explicit `/api/route/endpoints`.\r\n   */\r\n  async executeRestApiRequest(): Promise<Serialization> {\r\n    const uri = this.query.uri(this.query.params);\r\n    const response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via REST API request.`,\r\n      request: this.query.query,\r\n      uri\r\n    });\r\n\r\n    // Get URL\r\n    const url = `${config.dgraph.api.protocol}://${config.dgraph.api.host}:${\r\n      config.dgraph.api.port\r\n    }/api/${uri}`;\r\n\r\n    await axios\r\n      .get(url)\r\n      .then(axiosResponse => {\r\n        logger.info(\r\n          `DgraphQueryExecutor.executeRestApiRequest response %o`,\r\n          axiosResponse.data\r\n        );\r\n        response.response = axiosResponse.data.response;\r\n        response.success = true;\r\n        return response;\r\n      })\r\n      .catch(exception => {\r\n        logger.error(exception);\r\n        response.error = exception;\r\n        return response;\r\n      });\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Makes an API query request via JSON payload.\r\n   * @param request\r\n   */\r\n  async executeJsonApiRequest(): Promise<Serialization> {\r\n    const response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via JSON API request.`,\r\n      request: this.query.query\r\n    });\r\n\r\n    // Get URL\r\n    const url = `${config.dgraph.api.protocol}://${config.dgraph.api.host}:${\r\n      config.dgraph.api.port\r\n    }/api/json`;\r\n\r\n    await axios\r\n      .post(url, this)\r\n      .then(axiosResponse => {\r\n        logger.info(\r\n          `DgraphQueryExecutor.executeJsonApiRequest response %o`,\r\n          axiosResponse.data\r\n        );\r\n        response.response = axiosResponse.data.response;\r\n        response.success = true;\r\n        return response;\r\n      })\r\n      .catch(exception => {\r\n        logger.error(exception);\r\n        response.error = exception;\r\n        return response;\r\n      });\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Makes a direct request via GraphQL+.\r\n   * @param request\r\n   */\r\n  async executeDirectRequest(request?: Serialization): Promise<Serialization> {\r\n    const adapter = new DgraphAdapter();\r\n    let response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via direct GraphQL+ request.`,\r\n      request: this.query.query\r\n    });\r\n\r\n    // Allow request to be optionally passed.\r\n    request = request ? request : response;\r\n\r\n    if (this.isMutation) {\r\n      response = await adapter.mutate(request);\r\n    } else {\r\n      if (this.query.paramTypes) {\r\n        response = await adapter.queryWithVars(request, this.query.params);\r\n      } else {\r\n        response = await adapter.query(request);\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n}\r\n"]}