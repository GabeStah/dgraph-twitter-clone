{"version":3,"sources":["../packages/dgraph-query-manager/src/models/Uid.ts"],"names":[],"mappings":"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","file":"Uid.js","sourcesContent":["import * as crypto from 'crypto';\r\nimport { BaseModel } from './BaseModel';\r\nimport { Serialization } from '../classes';\r\n\r\nenum UidTypes {\r\n  Base16,\r\n  Base64\r\n}\r\n\r\ninterface UidInterface {\r\n  type: UidTypes;\r\n  uid: string;\r\n}\r\n\r\nexport type UidParamsType =\r\n  | BaseModel<any>\r\n  | Uid\r\n  | UidTypes\r\n  | Serialization\r\n  | string\r\n  | string[]\r\n  | number;\r\n\r\n/**\r\n * Uid type to handle custom UIDs necessary for Dgraph integration.\r\n */\r\nexport class Uid implements UidInterface {\r\n  type: UidTypes.Base64;\r\n  uid: string;\r\n\r\n  constructor(value?: UidParamsType) {\r\n    if (typeof value === undefined) {\r\n      this.uid = Uid.generateString(this.type);\r\n    } else if (value instanceof Uid) {\r\n      Object.assign(this, value);\r\n    } else if (value instanceof Serialization) {\r\n      if (value.uid) {\r\n        this.uid = this.getUidAsHex(value.uid);\r\n      }\r\n    } else if (value instanceof BaseModel) {\r\n      if (value.uid) {\r\n        this.uid = this.getUidAsHex(value.uid);\r\n      }\r\n    } else if (\r\n      typeof value === 'string' ||\r\n      typeof value === 'number' ||\r\n      typeof value === 'object'\r\n    ) {\r\n      this.uid = this.getUidAsHex(value);\r\n    } else {\r\n      this.uid = Uid.generateString(value);\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return this.uid;\r\n  }\r\n\r\n  /**\r\n   * Generates a new random Uid string.\r\n   * @param {UidTypes} type\r\n   * @param {number} byteCount\r\n   * @returns {string}\r\n   */\r\n  static generateString(\r\n    type: UidTypes = UidTypes.Base64,\r\n    byteCount = 12\r\n  ): string {\r\n    const base64 = crypto\r\n      .randomBytes(byteCount)\r\n      .toString('base64')\r\n      .toLowerCase();\r\n    switch (type) {\r\n      case UidTypes.Base64:\r\n        return base64;\r\n      case UidTypes.Base16:\r\n        return crypto\r\n          .randomBytes(byteCount)\r\n          .toString('hex')\r\n          .toLowerCase();\r\n      default:\r\n        return base64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Uid value to hex representation.\r\n   * @param {number | string | object} value\r\n   * @returns {string}\r\n   */\r\n  private getUidAsHex(value: number | string | object | any): string {\r\n    if (typeof value === 'string') {\r\n      if (value.slice(0, 2) === '0x') {\r\n        return value;\r\n      } else {\r\n        return `0x${parseInt(value).toString(16)}`;\r\n      }\r\n    } else if (typeof value === 'number') {\r\n      return `0x${parseInt(value.toString()).toString(16)}`;\r\n    } else if (typeof value === 'object' && Array.isArray(value)) {\r\n      // Assume first value is Uid.\r\n      return this.getUidAsHex(value[0]);\r\n    } else if (typeof value === 'object' && value.hasOwnProperty('uid')) {\r\n      return this.getUidAsHex(value.uid);\r\n    }\r\n    return Uid.generateString(this.type);\r\n  }\r\n}\r\n"]}