{"version":3,"sources":["../packages/dgraph-query-manager/src/helpers/utility.ts"],"names":[],"mappings":";;AAAA;;;GAGG;AACH,SAAgB,gBAAgB,CAAC,QAAe;IAC9C,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC;AAC/D,CAAC;AAFD,4CAEC;AAED;;;GAGG;AACH,SAAgB,oBAAoB,CAAC,WAAgB;IACnD,IAAI,MAAM,GAAG,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACtC,mDAAmD;IACnD,MAAM,GAAG,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IACzC,OAAO,WAAW,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACxE,CAAC;AALD,oDAKC;AAED;;;;;GAKG;AACH,SAAgB,YAAY,CAAC,GAAW,EAAE,GAAW;IACnD,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACrB,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACtB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC;AACvD,CAAC;AAJD,oCAIC;AAED;;;GAGG;AACH,SAAgB,eAAe,CAAC,MAAM,GAAG,GAAG;IAC1C,OAAO,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,GAAG,MAAM,CAAC;AACrC,CAAC;AAFD,0CAEC","file":"utility.js","sourcesContent":["/**\r\n * Retrieves a random element from an Array.\r\n * @param elements\r\n */\r\nexport function getRandomElement(elements: any[]): any {\r\n  return elements[Math.floor(Math.random() * elements.length)];\r\n}\r\n\r\n/**\r\n * Retrieves a random element from an enum.\r\n * @param enumeration\r\n */\r\nexport function getRandomEnumElement(enumeration: any): any {\r\n  let values = Object.keys(enumeration);\r\n  // Remove latter half, to retain only index values.\r\n  values = values.slice(values.length / 2);\r\n  return enumeration[values[Math.floor(Math.random() * values.length)]];\r\n}\r\n\r\n/**\r\n * Obtains a random number between the min and max values.\r\n * Source: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random#Getting_a_random_integer_between_two_values\r\n * @param min\r\n * @param max\r\n */\r\nexport function getRandomInt(min: number, max: number): number {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min)) + min;\r\n}\r\n\r\n/**\r\n * Returns a boolean value based on weighted chance.\r\n * @param chance\r\n */\r\nexport function weightedBoolean(chance = 0.5): boolean {\r\n  return Math.random() >= 1 - chance;\r\n}\r\n"]}