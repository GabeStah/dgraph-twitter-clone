{"version":3,"sources":["../packages/dgraph-query-manager/src/models/Uid.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,SAAS,EAAE,MAAM,aAAa,CAAC;AACxC,OAAO,EAAE,aAAa,EAAE,MAAM,YAAY,CAAC;AAE3C,aAAK,QAAQ;IACX,MAAM,IAAA;IACN,MAAM,IAAA;CACP;AAED,UAAU,YAAY;IACpB,IAAI,EAAE,QAAQ,CAAC;IACf,GAAG,EAAE,MAAM,CAAC;CACb;AAED,oBAAY,aAAa,GACrB,SAAS,CAAC,GAAG,CAAC,GACd,GAAG,GACH,QAAQ,GACR,aAAa,GACb,MAAM,GACN,MAAM,EAAE,GACR,MAAM,CAAC;AAEX;;GAEG;AACH,qBAAa,GAAI,YAAW,YAAY;IACtC,IAAI,EAAE,QAAQ,CAAC,MAAM,CAAC;IACtB,GAAG,EAAE,MAAM,CAAC;gBAEA,KAAK,CAAC,EAAE,aAAa;IAwBjC,QAAQ,IAAI,MAAM;IAIlB;;;;;OAKG;IACH,MAAM,CAAC,cAAc,CACnB,IAAI,GAAE,QAA0B,EAChC,SAAS,SAAK,GACb,MAAM;IAkBT;;;;OAIG;IACH,OAAO,CAAC,WAAW;CAiBpB","file":"Uid.d.ts","sourcesContent":["import * as crypto from 'crypto';\r\nimport { BaseModel } from './BaseModel';\r\nimport { Serialization } from '../classes';\r\n\r\nenum UidTypes {\r\n  Base16,\r\n  Base64\r\n}\r\n\r\ninterface UidInterface {\r\n  type: UidTypes;\r\n  uid: string;\r\n}\r\n\r\nexport type UidParamsType =\r\n  | BaseModel<any>\r\n  | Uid\r\n  | UidTypes\r\n  | Serialization\r\n  | string\r\n  | string[]\r\n  | number;\r\n\r\n/**\r\n * Uid type to handle custom UIDs necessary for Dgraph integration.\r\n */\r\nexport class Uid implements UidInterface {\r\n  type: UidTypes.Base64;\r\n  uid: string;\r\n\r\n  constructor(value?: UidParamsType) {\r\n    if (typeof value === undefined) {\r\n      this.uid = Uid.generateString(this.type);\r\n    } else if (value instanceof Uid) {\r\n      Object.assign(this, value);\r\n    } else if (value instanceof Serialization) {\r\n      if (value.uid) {\r\n        this.uid = this.getUidAsHex(value.uid);\r\n      }\r\n    } else if (value instanceof BaseModel) {\r\n      if (value.uid) {\r\n        this.uid = this.getUidAsHex(value.uid);\r\n      }\r\n    } else if (\r\n      typeof value === 'string' ||\r\n      typeof value === 'number' ||\r\n      typeof value === 'object'\r\n    ) {\r\n      this.uid = this.getUidAsHex(value);\r\n    } else {\r\n      this.uid = Uid.generateString(value);\r\n    }\r\n  }\r\n\r\n  toString(): string {\r\n    return this.uid;\r\n  }\r\n\r\n  /**\r\n   * Generates a new random Uid string.\r\n   * @param {UidTypes} type\r\n   * @param {number} byteCount\r\n   * @returns {string}\r\n   */\r\n  static generateString(\r\n    type: UidTypes = UidTypes.Base64,\r\n    byteCount = 12\r\n  ): string {\r\n    const base64 = crypto\r\n      .randomBytes(byteCount)\r\n      .toString('base64')\r\n      .toLowerCase();\r\n    switch (type) {\r\n      case UidTypes.Base64:\r\n        return base64;\r\n      case UidTypes.Base16:\r\n        return crypto\r\n          .randomBytes(byteCount)\r\n          .toString('hex')\r\n          .toLowerCase();\r\n      default:\r\n        return base64;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert Uid value to hex representation.\r\n   * @param {number | string | object} value\r\n   * @returns {string}\r\n   */\r\n  private getUidAsHex(value: number | string | object | any): string {\r\n    if (typeof value === 'string') {\r\n      if (value.slice(0, 2) === '0x') {\r\n        return value;\r\n      } else {\r\n        return `0x${parseInt(value).toString(16)}`;\r\n      }\r\n    } else if (typeof value === 'number') {\r\n      return `0x${parseInt(value.toString()).toString(16)}`;\r\n    } else if (typeof value === 'object' && Array.isArray(value)) {\r\n      // Assume first value is Uid.\r\n      return this.getUidAsHex(value[0]);\r\n    } else if (typeof value === 'object' && value.hasOwnProperty('uid')) {\r\n      return this.getUidAsHex(value.uid);\r\n    }\r\n    return Uid.generateString(this.type);\r\n  }\r\n}\r\n"]}