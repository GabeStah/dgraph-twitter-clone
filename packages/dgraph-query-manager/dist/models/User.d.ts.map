{"version":3,"sources":["../packages/dgraph-query-manager/src/models/User.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,SAAS,EAAE,kBAAkB,EAAO,MAAM,WAAW,CAAC;AAE/D,MAAM,WAAW,aAAc,SAAQ,kBAAkB;IACvD,gBAAgB,EAAE,IAAI,GAAG,MAAM,CAAC;IAChC,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAC5B,YAAY,EAAE,MAAM,CAAC;IACrB,sBAAsB,EAAE,MAAM,CAAC;IAC/B,qBAAqB,EAAE,MAAM,CAAC;IAC9B,mBAAmB,EAAE,MAAM,CAAC;IAC5B,kBAAkB,EAAE,MAAM,CAAC;IAC3B,eAAe,CAAC,EAAE,MAAM,CAAC;IACzB,WAAW,EAAE,MAAM,CAAC;IACpB,iBAAiB,EAAE,MAAM,CAAC;IAC1B,UAAU,CAAC,EAAE,MAAM,CAAC;CACrB;AAED,qBAAa,IAAK,SAAQ,SAAS,CAAC,IAAI,CAAE,YAAW,aAAa;IAChE;;;OAGG;IACH,gBAAgB,EAAE,IAAI,CAAc;IAEpC;;;OAGG;IACH,kBAAkB,CAAC,EAAE,MAAM,CAAC;IAE5B;;;OAGG;IACH,YAAY,EAAE,MAAM,CAAC;IAErB;;;OAGG;IACH,sBAAsB,EAAE,MAAM,CAAC;IAE/B;;;OAGG;IACH,qBAAqB,EAAE,MAAM,CAAC;IAE9B;;;OAGG;IACH,mBAAmB,EAAE,MAAM,CAAC;IAE5B;;;OAGG;IACH,kBAAkB,EAAE,MAAM,CAAC;IAE3B;;;OAGG;IACH,eAAe,CAAC,EAAE,MAAM,CAAC;IAEzB;;;OAGG;IACH,WAAW,EAAE,MAAM,CAAC;IAEpB;;;OAGG;IACH,iBAAiB,EAAE,MAAM,CAAC;IAE1B;;;OAGG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;gBAER,MAAM,GAAE,OAAO,CAAC,IAAI,CAAM;IAMtC;;;OAGG;IACH,MAAM,CAAC,WAAW,CAAC,IAAI,EAAE,MAAM,GAAE,OAAO,CAAC,IAAI,GAAG,GAAG,CAAM,GAAG,OAAO,CAAC,IAAI,CAAC;IAOzE;;;OAGG;IACH,MAAM,CAAC,QAAQ,CAAC,IAAI,GAAE,MAA0B,GAAG,IAAI;IAIvD;;;OAGG;IACH,MAAM,CAAC,kBAAkB,CAAC,IAAI,GAAE,MAA0B,GAAG,OAAO,CAAC,IAAI,CAAC;IAiB1E;;;;OAIG;WACU,IAAI,CAAC,MAAM,GAAE,OAAO,CAAC,IAAI,CAAM,GAAG,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;CActE","file":"User.d.ts","sourcesContent":["// Lib\r\nimport * as faker from 'faker';\r\n// Local\r\nimport config from '../config';\r\nimport { BaseModel, BaseModelInterface, Uid } from '../models';\r\n\r\nexport interface UserInterface extends BaseModelInterface {\r\n  'user.createdAt': Date | string;\r\n  'user.description'?: string;\r\n  'user.email': string;\r\n  'user.favouritesCount': number;\r\n  'user.followersCount': number;\r\n  'user.friendsCount': number;\r\n  'user.listedCount': number;\r\n  'user.location'?: string;\r\n  'user.name': string;\r\n  'user.screenName': string;\r\n  'user.url'?: string;\r\n}\r\n\r\nexport class User extends BaseModel<User> implements UserInterface {\r\n  /**\r\n   * UTC time when this User was created.\r\n   * @type {Date}\r\n   */\r\n  'user.createdAt': Date = new Date();\r\n\r\n  /**\r\n   * The user-defined UTF-8 string describing their account.\r\n   * @type {?string}\r\n   */\r\n  'user.description'?: string;\r\n\r\n  /**\r\n   * Email address of this user.\r\n   * @type {string}\r\n   */\r\n  'user.email': string;\r\n\r\n  /**\r\n   * The number of Tweets this user has liked in the account’s lifetime\r\n   * @type {number}\r\n   */\r\n  'user.favouritesCount': number;\r\n\r\n  /**\r\n   * The number of followers this account currently has.\r\n   * @type {number}\r\n   */\r\n  'user.followersCount': number;\r\n\r\n  /**\r\n   * The number of users this account is following.\r\n   * @type {number}\r\n   */\r\n  'user.friendsCount': number;\r\n\r\n  /**\r\n   * The number of public lists that this user is a member of.\r\n   * @type {number}\r\n   */\r\n  'user.listedCount': number;\r\n\r\n  /**\r\n   * The user-defined location for this account’s profile. Not necessarily a location, nor machine-parseable.\r\n   * @type {?string}\r\n   */\r\n  'user.location'?: string;\r\n\r\n  /**\r\n   * The key of the user, as they’ve defined it.\r\n   * @type {string}\r\n   */\r\n  'user.name': string;\r\n\r\n  /**\r\n   * The screen key, handle, or alias that this user identifies themselves with.\r\n   * @type {string}\r\n   */\r\n  'user.screenName': string;\r\n\r\n  /**\r\n   * A URL provided by the user in association with their profile.\r\n   * @type {?string}\r\n   */\r\n  'user.url'?: string;\r\n\r\n  constructor(params: Partial<User> = {}) {\r\n    super(params);\r\n    // Override defaults\r\n    Object.assign(this, User.deserialize(params));\r\n  }\r\n\r\n  /**\r\n   * Deserialize User object.\r\n   * @param params\r\n   */\r\n  static deserialize<User>(params: Partial<User | any> = {}): Partial<User> {\r\n    if (params['user.createdAt'])\r\n      params['user.createdAt'] = new Date(params['user.createdAt']);\r\n    params = super.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Generates a User instance for testing.\r\n   * @param seed\r\n   */\r\n  static generate(seed: number = config.faker.seed): User {\r\n    return new User(this.generateFakeParams(seed));\r\n  }\r\n\r\n  /**\r\n   * Generates a mockup User object for testing.\r\n   * @param seed\r\n   */\r\n  static generateFakeParams(seed: number = config.faker.seed): Partial<User> {\r\n    // Set seed base.\r\n    faker.seed(seed);\r\n    return {\r\n      'user.description': faker.lorem.paragraph(),\r\n      'user.email': faker.internet.exampleEmail(),\r\n      'user.favouritesCount': faker.random.number(),\r\n      'user.followersCount': faker.random.number(),\r\n      'user.friendsCount': faker.random.number(),\r\n      'user.listedCount': faker.random.number(),\r\n      'user.location': faker.fake('{{address.city}}, {{address.country}}'),\r\n      'user.name': faker.name.findName(),\r\n      'user.screenName': faker.internet.userName(),\r\n      'user.url': faker.internet.url()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Performs all steps of async User creation.\r\n   * @param {Partial<User>} params\r\n   * @returns {Promise<User<Tweet>>}\r\n   */\r\n  static async load(params: Partial<User> = {}): Promise<Partial<User>> {\r\n    // Combine params with default properties.\r\n    params = this.injectDefaults(params);\r\n    // Serialize (e.g. convert fields to payload-compatible object)\r\n    params = await this.serialize(params);\r\n    // Perform mutation (e.g. upsert)\r\n    const serialization = await this.insert(params);\r\n    if (!params.uid) {\r\n      params.uid = new Uid(serialization);\r\n    }\r\n    // Deserialize (e.g. convert payload back to object)\r\n    params = this.deserialize(params);\r\n    return params;\r\n  }\r\n}\r\n"]}