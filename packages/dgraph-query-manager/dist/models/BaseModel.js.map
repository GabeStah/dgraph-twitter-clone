{"version":3,"sources":["../packages/dgraph-query-manager/src/models/BaseModel.ts"],"names":[],"mappings":"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","file":"BaseModel.js","sourcesContent":["// tslint:disable:no-null-keyword\r\nimport logger from '../logger';\r\nimport { DgraphAdapterHttp as DgraphAdapter, MutationTypes } from '../adapters';\r\nimport { DgraphQueryExecutor, Queries, Serialization } from '../classes';\r\nimport { Hashtag, Tweet, Uid, UidParamsType, User } from '../models';\r\n\r\n/**\r\n * All - Deletes the node and all child nodes.\r\n * Node - Deletes node.\r\n * Edge - Deletes specified edge(s).\r\n * AllChildEdges - Removes all child edges from node.\r\n * AllChildNodes - Deletes all child nodes and edge references from node.\r\n */\r\nexport enum BaseModelDeletionMode {\r\n  All,\r\n  Node,\r\n  Edge,\r\n  AllChildEdges,\r\n  AllChildNodes\r\n}\r\n\r\nexport type BaseModelNodeableType = Hashtag | Tweet | User;\r\n\r\nexport interface BaseModelInterface {\r\n  uid?: Uid;\r\n}\r\n\r\nexport class BaseModel<T> implements BaseModelInterface {\r\n  uid?: Uid;\r\n\r\n  /**\r\n   * Constructs an instance of inheriting class using an (optional) partial parameters object.\r\n   * @param {Partial<BaseModel<T>>} params\r\n   * @param uid\r\n   */\r\n  constructor(params: Partial<BaseModel<T>> = {}, uid?: UidParamsType) {\r\n    Object.assign(this, params);\r\n    if (this.uid) {\r\n      this.uid = new Uid(this.uid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Factory that creates BaseModel instances from Partial<BaseModel<T>> paramTypes.\r\n   * @param {Partial<BaseModel<T>>} params\r\n   * @returns {Promise<BaseModel<T>>}\r\n   */\r\n  static async create<T extends typeof BaseModel>(\r\n    params: Partial<BaseModel<T>>\r\n  ): Promise<Serialization> {\r\n    const className = this.name;\r\n    const serialization = new Serialization({\r\n      message: `${className} successfully created.`,\r\n      data: params,\r\n      request: params\r\n    });\r\n\r\n    try {\r\n      const processed = await this.load(params);\r\n      serialization.response = new this(processed);\r\n      serialization.success = true;\r\n    } catch (error) {\r\n      logger.info(`${className}.create.load.then failed, error: %o', error`);\r\n      serialization.error = error;\r\n      serialization.message = `${className} creation failed.`;\r\n      serialization.success = false;\r\n    }\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Factory that creates multiple BaseModel instances from BaseModel array.\r\n   * @param {Partial<BaseModel<T>>[]} params\r\n   * @returns {Promise<BaseModel<T>[]>}\r\n   */\r\n  static async createMany<T extends typeof BaseModel>(\r\n    params: Partial<BaseModel<T>>[] = []\r\n  ): Promise<BaseModel<T>[]> {\r\n    const elements: any[] = [];\r\n    for await (const param of params) {\r\n      elements.push((await this.create(param)).response);\r\n    }\r\n    return elements;\r\n  }\r\n\r\n  /**\r\n   * Delete nodes, edges, or children of passed object.\r\n   * @param {Uid | BaseModel<T> | object | string} item\r\n   * @param {BaseModelDeletionMode} mode\r\n   * @param {string} edge\r\n   * @returns {Promise<Serialization>}\r\n   */\r\n  static async delete<T extends typeof BaseModel>(\r\n    this: T,\r\n    item: Uid | BaseModel<T> | object | string,\r\n    mode: BaseModelDeletionMode = BaseModelDeletionMode.All,\r\n    edge?: string\r\n  ): Promise<Serialization> {\r\n    const adapter = new DgraphAdapter();\r\n    const className = this.name;\r\n    let serialization = new Serialization({\r\n      message: `${className} successfully deleted.`,\r\n      data: item\r\n    });\r\n\r\n    try {\r\n      if (\r\n        item instanceof BaseModel ||\r\n        (typeof item === 'object' && !(item instanceof Uid))\r\n      ) {\r\n        serialization.request = this.getDeletionRequest(item, mode, edge);\r\n      }\r\n\r\n      serialization = await adapter.mutate(\r\n        serialization,\r\n        MutationTypes.DeleteJson\r\n      );\r\n      serialization.success = true;\r\n    } catch (error) {\r\n      serialization.error = error;\r\n      serialization.statusCode = 500;\r\n      serialization.success = false;\r\n      serialization.message = `${className} deletion failed.`;\r\n    }\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Deserialize Dgraph object.\r\n   * @param {Partial<any | T>} params\r\n   * @returns {Promise<Partial<T>>}\r\n   */\r\n  static deserialize<T>(params: Partial<T | any> = {}): Partial<T> {\r\n    // Update Uid\r\n    if (params.uid) {\r\n      if (Array.isArray(params.uid)) {\r\n        // Assume first Uid is applicable\r\n        params.uid = new Uid(params.uid[0]);\r\n      } else {\r\n        params.uid = new Uid(params.uid);\r\n      }\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Find a node in database based on passed Uid or BaseModel<T> instance type.\r\n   * @param {BaseModel<T> | Uid | string | number} params\r\n   * @returns {Promise<Serialization>}\r\n   */\r\n  static async find<T extends typeof BaseModel>(\r\n    this: T,\r\n    params: BaseModel<T> | Uid | string | number\r\n  ): Promise<Serialization> {\r\n    const className = this.name;\r\n    let uid = '';\r\n\r\n    let serialization = new Serialization({\r\n      message: `${className} found.`\r\n    });\r\n\r\n    try {\r\n      // Get uid string from Uid instance.\r\n      if (params instanceof this && params.uid) {\r\n        uid = params.uid.toString();\r\n      } else if (params instanceof Uid) {\r\n        uid = params.toString();\r\n      }\r\n\r\n      const executor = new DgraphQueryExecutor(Queries[className].find, {\r\n        $id: uid\r\n      });\r\n\r\n      serialization = await executor.execute();\r\n      if (serialization && serialization.success && serialization.response) {\r\n        // Create instance of T from deserialized result.\r\n        serialization.response = new this(\r\n          serialization.response\r\n        ) as InstanceType<T>;\r\n      }\r\n    } catch (error) {\r\n      serialization.error = error;\r\n      serialization.statusCode = 500;\r\n      serialization.success = false;\r\n      serialization.message = `${className} find failed.`;\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Find this node in database.\r\n   * @returns {Promise<Serialization>}\r\n   */\r\n  async find<T>(): Promise<Serialization> {\r\n    const adapter = new DgraphAdapter();\r\n    const className = this.constructor.name;\r\n    const serialization = new Serialization({\r\n      message: `${className} found.`\r\n    });\r\n\r\n    try {\r\n      const payload = await adapter.query(serialization);\r\n      serialization.data = payload;\r\n      serialization.response = payload;\r\n      serialization.success = true;\r\n    } catch (error) {\r\n      serialization.data = this;\r\n      serialization.statusCode = 500;\r\n      serialization.success = false;\r\n      serialization.message = `${className} find failed.`;\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Converts passed JSON string or object to new inheriting class instance.\r\n   * @param {object | string} json\r\n   * @returns {InstanceType<T>}\r\n   */\r\n  static fromJSON<T extends typeof BaseModel>(\r\n    this: T,\r\n    json: object | string\r\n  ): InstanceType<T> {\r\n    switch (typeof json) {\r\n      case 'object':\r\n        return Object.assign(new this() as InstanceType<T>, json);\r\n      case 'string':\r\n        return Object.assign(new this() as InstanceType<T>, JSON.parse(json));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Converts passed object to new inheriting calss instance.\r\n   * @param {object} obj\r\n   * @returns {InstanceType<T>}\r\n   */\r\n  fromObject<T extends typeof BaseModel>(\r\n    this: T,\r\n    obj: object\r\n  ): InstanceType<T> {\r\n    return Object.assign(new this() as InstanceType<T>, obj);\r\n  }\r\n\r\n  /**\r\n   * Generates a deletion request object based on passed object and paramTypes.\r\n   * @param {BaseModel<T> | any} params\r\n   * @param {BaseModelDeletionMode} mode\r\n   * @param {string} edge\r\n   * @returns {object | undefined}\r\n   */\r\n  static getDeletionRequest<T extends typeof BaseModel>(\r\n    params: BaseModel<T> | any,\r\n    mode: BaseModelDeletionMode = BaseModelDeletionMode.All,\r\n    edge?: string\r\n  ): object | undefined {\r\n    let result: any = [];\r\n    // Add primary Uid\r\n    if (params.hasOwnProperty('uid') && params.uid) {\r\n      result.push({\r\n        uid: params.uid.toString()\r\n      });\r\n    }\r\n\r\n    if (mode === BaseModelDeletionMode.All) {\r\n      // Add parent node Uid to uids list.\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        // Check if deletable\r\n        if (value instanceof BaseModel && value.isDeletableType()) {\r\n          // Add Uid to list to delete actual child node\r\n          result.push(new Uid(value));\r\n        } else if (\r\n          Array.isArray(value) &&\r\n          value.some(\r\n            element => element instanceof BaseModel && element.isDeletableType()\r\n          )\r\n        ) {\r\n          // Add array of node Uids to uids list\r\n          result = result.concat(\r\n            value\r\n              .filter(parent => parent.isDeletableType())\r\n              .map(child => new Uid(child))\r\n          );\r\n        }\r\n      });\r\n    } else if (mode === BaseModelDeletionMode.AllChildNodes) {\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        // Check if deletable\r\n        if (value instanceof BaseModel && value.isDeletableType()) {\r\n          // Null key of child type to remove edge reference\r\n          result[0][key] = null;\r\n          // Add Uid to list to delete actual child node\r\n          result.push(new Uid(value));\r\n        } else if (\r\n          Array.isArray(value) &&\r\n          value.some(\r\n            element => element instanceof BaseModel && element.isDeletableType()\r\n          )\r\n        ) {\r\n          // Null key of child type to remove edge reference\r\n          result[0][key] = null;\r\n          // Add array of node Uids to uids list\r\n          result = result.concat(\r\n            value\r\n              .filter(parent => parent.isDeletableType())\r\n              .map(child => new Uid(child))\r\n          );\r\n        }\r\n      });\r\n    } else if (mode === BaseModelDeletionMode.AllChildEdges) {\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        // Check if deletable\r\n        if (value instanceof BaseModel && value.isDeletableType()) {\r\n          // Null key of child type to remove edge reference\r\n          result[0][key] = null;\r\n        } else if (\r\n          Array.isArray(value) &&\r\n          value.some(\r\n            element => element instanceof BaseModel && element.isDeletableType()\r\n          )\r\n        ) {\r\n          result[0][key] = null;\r\n        }\r\n      });\r\n    } else if (mode === BaseModelDeletionMode.Edge) {\r\n      let count = 0;\r\n      if (edge) {\r\n        Object.entries(params).forEach(([key, value]) => {\r\n          if (key === edge) {\r\n            // Check if deletable\r\n            if (value instanceof BaseModel && value.isDeletableType()) {\r\n              // Null key of child type to remove edge reference\r\n              result[0][key] = null;\r\n              count++;\r\n            } else if (\r\n              Array.isArray(value) &&\r\n              value.some(\r\n                element =>\r\n                  element instanceof BaseModel && element.isDeletableType()\r\n              )\r\n            ) {\r\n              result[0][key] = null;\r\n              count++;\r\n            }\r\n          }\r\n        });\r\n      }\r\n      // No matching edges found.\r\n      if (count === 0) {\r\n        throw new Error(\r\n          `Cannot delete edge (${edge}) of object: ${JSON.stringify(params)}`\r\n        );\r\n      }\r\n    }\r\n\r\n    // GRPC won't accept a single-element Array, so return first element object if singular.\r\n    return result.length === 1 ? result[0] : result;\r\n  }\r\n\r\n  /**\r\n   * Generates temporary instance of T and returns object containing combined default properties with passes paramTypes.\r\n   * @param {Partial<T>} params\r\n   * @returns {InstanceType<T>}\r\n   */\r\n  static injectDefaults<T extends typeof BaseModel>(\r\n    this: T,\r\n    params: Partial<T> = {}\r\n  ): InstanceType<T> {\r\n    const temp = new this() as InstanceType<T>;\r\n    return { ...temp, ...params };\r\n  }\r\n\r\n  /**\r\n   * Directly insert object into database.\r\n   * @param {Partial<T>} params\r\n   * @param {Partial<T> | object} params2\r\n   * @returns {Promise<Serialization>}\r\n   */\r\n  static async insert<T>(\r\n    params: Partial<T> = {},\r\n    params2?: Partial<T> | object\r\n  ): Promise<Serialization> {\r\n    Object.assign(params, params2);\r\n    const adapter = new DgraphAdapter();\r\n    const className = this.name;\r\n    let serialization = new Serialization({\r\n      message: `${className} created.`,\r\n      request: params,\r\n      data: params\r\n    });\r\n\r\n    try {\r\n      serialization = await adapter.mutate(serialization);\r\n      serialization.success = true;\r\n    } catch (error) {\r\n      serialization.statusCode = 500;\r\n      serialization.success = false;\r\n      serialization.error = error;\r\n      serialization.message = `${className} creation failed.`;\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Indicates if instance is a deletable type.\r\n   * @returns {boolean}\r\n   */\r\n  isDeletableType(): boolean {\r\n    const className = this.constructor.name;\r\n    return className === 'Hashtag' || className === 'Tweet';\r\n  }\r\n\r\n  /**\r\n   * Indicates if passed in value is a deletable type.\r\n   * @param obj\r\n   * @returns {boolean}\r\n   */\r\n  static isDeletableType(obj: any): boolean {\r\n    const className = obj.constructor.name;\r\n    return className === 'Hashtag' || className === 'Tweet';\r\n  }\r\n\r\n  /**\r\n   * Indicates if instance is a nodeable type (i.e. can have a Uid in database).\r\n   * @returns {boolean}\r\n   */\r\n  isNodeableType(): boolean {\r\n    const className = this.constructor.name;\r\n    return (\r\n      className === 'Hashtag' || className === 'Tweet' || className === 'User'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Indicates if passed in value is a nodeable type (i.e. can have a Uid in database).\r\n   * @param obj\r\n   * @returns {boolean}\r\n   */\r\n  static isNodeableType(obj: any): boolean {\r\n    const className = obj.constructor.name;\r\n    return (\r\n      className === 'Hashtag' || className === 'Tweet' || className === 'User'\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Determines if passed payload object is valid.\r\n   * @param {object} response\r\n   * @returns {boolean}\r\n   */\r\n  static isResponseValid<T extends typeof BaseModel>(\r\n    this: T,\r\n    response: object\r\n  ): boolean {\r\n    const className = this.name;\r\n    return !!(typeof response === 'object' && response[className]);\r\n  }\r\n\r\n  /**\r\n   * Invokes async BaseModel<T> creation process.\r\n   * @param {Partial<BaseModel<T>>} params\r\n   * @returns {Promise<Partial<BaseModel<T>>>}\r\n   */\r\n  static async load<T>(\r\n    params: Partial<BaseModel<T>> = {}\r\n  ): Promise<Partial<BaseModel<T>>> {\r\n    // Combine paramTypes with default properties.\r\n    params = this.injectDefaults(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Serialize object into Dgraph acceptable format for JSON transaction.\r\n   * @param {Partial<any | T>} params\r\n   * @returns {Promise<Partial<T>>}\r\n   */\r\n  static async serialize<T>(\r\n    params: Partial<T | any> = {}\r\n  ): Promise<Partial<T>> {\r\n    const serialization: any = {};\r\n    // Update Uid\r\n    if (params.uid) {\r\n      if (Array.isArray(params.uid)) {\r\n        // Assume first Uid is applicable\r\n        params.uid = new Uid(params.uid[0]);\r\n      } else {\r\n        params.uid = new Uid(params.uid);\r\n      }\r\n    }\r\n    for await (const key of Object.keys(params)) {\r\n      // Check if Uid\r\n      if (params[key] instanceof Uid && key === 'uid') {\r\n        // Convert Uid to string values\r\n        serialization[key] = params[key].toString();\r\n      } else if (params[key] instanceof BaseModel) {\r\n        // For BaseModel instances recursively serialize\r\n        serialization[key] = await this.serialize(params[key]);\r\n      } else if (\r\n        Array.isArray(params[key]) &&\r\n        params[key].filter(instance => instance instanceof BaseModel).length > 0\r\n      ) {\r\n        const instances: any[] = [];\r\n        for await (const instance of params[key]) {\r\n          instances.push(await this.serialize(instance));\r\n        }\r\n        serialization[key] = instances;\r\n      } else {\r\n        serialization[key] = params[key];\r\n      }\r\n    }\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Converts class instance to JavaScript object.\r\n   * @returns {T}\r\n   */\r\n  toObject<T>(this: T): T {\r\n    return Object.assign({}, this);\r\n  }\r\n\r\n  /**\r\n   * Create database node of instance if matching Uid doesn't exist.\r\n   * If Uid exists, update node instead.\r\n   * @param {Partial<T>} params\r\n   * @param {Partial<T> | object} params2\r\n   * @returns {Promise<Serialization>}\r\n   */\r\n  static async upsert<T>(\r\n    params: Partial<T> = {},\r\n    params2?: Partial<T> | object\r\n  ): Promise<Serialization> {\r\n    Object.assign(params, params2);\r\n    const className = this.name;\r\n    const serialization = new Serialization({\r\n      message: `${className} upserted.`,\r\n      data: params,\r\n      request: params\r\n    });\r\n\r\n    try {\r\n      const payload = await this.load(params);\r\n      serialization.response = new this(payload);\r\n      serialization.success = true;\r\n    } catch (error) {\r\n      serialization.error = error;\r\n      serialization.statusCode = 500;\r\n      serialization.success = false;\r\n      serialization.message = `${className} upsert failed.`;\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n}\r\n"]}