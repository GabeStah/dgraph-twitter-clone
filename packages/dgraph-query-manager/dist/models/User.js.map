{"version":3,"sources":["../packages/dgraph-query-manager/src/models/User.ts"],"names":[],"mappings":"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","file":"User.js","sourcesContent":["// Lib\r\nimport * as faker from 'faker';\r\n// Local\r\nimport config from '../config';\r\nimport { BaseModel, BaseModelInterface, Uid } from '../models';\r\n\r\nexport interface UserInterface extends BaseModelInterface {\r\n  'user.createdAt': Date | string;\r\n  'user.description'?: string;\r\n  'user.email': string;\r\n  'user.favouritesCount': number;\r\n  'user.followersCount': number;\r\n  'user.friendsCount': number;\r\n  'user.listedCount': number;\r\n  'user.location'?: string;\r\n  'user.name': string;\r\n  'user.screenName': string;\r\n  'user.url'?: string;\r\n}\r\n\r\nexport class User extends BaseModel<User> implements UserInterface {\r\n  /**\r\n   * UTC time when this User was created.\r\n   * @type {Date}\r\n   */\r\n  'user.createdAt': Date = new Date();\r\n\r\n  /**\r\n   * The user-defined UTF-8 string describing their account.\r\n   * @type {?string}\r\n   */\r\n  'user.description'?: string;\r\n\r\n  /**\r\n   * Email address of this user.\r\n   * @type {string}\r\n   */\r\n  'user.email': string;\r\n\r\n  /**\r\n   * The number of Tweets this user has liked in the account’s lifetime\r\n   * @type {number}\r\n   */\r\n  'user.favouritesCount': number;\r\n\r\n  /**\r\n   * The number of followers this account currently has.\r\n   * @type {number}\r\n   */\r\n  'user.followersCount': number;\r\n\r\n  /**\r\n   * The number of users this account is following.\r\n   * @type {number}\r\n   */\r\n  'user.friendsCount': number;\r\n\r\n  /**\r\n   * The number of public lists that this user is a member of.\r\n   * @type {number}\r\n   */\r\n  'user.listedCount': number;\r\n\r\n  /**\r\n   * The user-defined location for this account’s profile. Not necessarily a location, nor machine-parseable.\r\n   * @type {?string}\r\n   */\r\n  'user.location'?: string;\r\n\r\n  /**\r\n   * The key of the user, as they’ve defined it.\r\n   * @type {string}\r\n   */\r\n  'user.name': string;\r\n\r\n  /**\r\n   * The screen key, handle, or alias that this user identifies themselves with.\r\n   * @type {string}\r\n   */\r\n  'user.screenName': string;\r\n\r\n  /**\r\n   * A URL provided by the user in association with their profile.\r\n   * @type {?string}\r\n   */\r\n  'user.url'?: string;\r\n\r\n  constructor(params: Partial<User> = {}) {\r\n    super(params);\r\n    // Override defaults\r\n    Object.assign(this, User.deserialize(params));\r\n  }\r\n\r\n  /**\r\n   * Deserialize User object.\r\n   * @param params\r\n   */\r\n  static deserialize<User>(params: Partial<User | any> = {}): Partial<User> {\r\n    if (params['user.createdAt'])\r\n      params['user.createdAt'] = new Date(params['user.createdAt']);\r\n    params = super.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Generates a User instance for testing.\r\n   * @param seed\r\n   * @param params\r\n   */\r\n  static generate(\r\n    seed: number = config.faker.seed,\r\n    params?: Partial<User>\r\n  ): User {\r\n    return new User(this.generateFakeParams(seed, params));\r\n  }\r\n\r\n  /**\r\n   * Generates a mockup User object for testing.\r\n   * @param seed\r\n   * @param params\r\n   */\r\n  static generateFakeParams(\r\n    seed: number = config.faker.seed,\r\n    params?: Partial<User>\r\n  ): Partial<User> {\r\n    // Set seed base.\r\n    faker.seed(seed);\r\n    const max = 1000;\r\n    return {\r\n      'user.description': faker.lorem.paragraph(),\r\n      'user.email': faker.internet.exampleEmail(),\r\n      'user.favouritesCount': faker.random.number(max),\r\n      'user.followersCount': faker.random.number(max),\r\n      'user.friendsCount': faker.random.number(max),\r\n      'user.listedCount': faker.random.number(max),\r\n      'user.location': faker.fake('{{address.city}}, {{address.country}}'),\r\n      'user.name': faker.name.findName(),\r\n      'user.screenName': User.generateValidUsername(),\r\n      'user.url': faker.internet.url(),\r\n      ...params\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates a valid random username.\r\n   */\r\n  private static generateValidUsername() {\r\n    let name: string = faker.internet.userName();\r\n    if (name.includes('.')) {\r\n      name = User.generateValidUsername();\r\n    }\r\n    return name;\r\n  }\r\n\r\n  /**\r\n   * Performs all steps of async User creation.\r\n   * @param {Partial<User>} params\r\n   * @returns {Promise<User<Tweet>>}\r\n   */\r\n  static async load(params: Partial<User> = {}): Promise<Partial<User>> {\r\n    // Combine params with default properties.\r\n    params = this.injectDefaults(params);\r\n    // Serialize (e.g. convert fields to payload-compatible object)\r\n    params = await this.serialize(params);\r\n    // Perform mutation (e.g. upsert)\r\n    const serialization = await this.insert(params);\r\n    if (!params.uid) {\r\n      params.uid = new Uid(serialization);\r\n    }\r\n    // Deserialize (e.g. convert payload back to object)\r\n    params = this.deserialize(params);\r\n    return params;\r\n  }\r\n}\r\n"]}