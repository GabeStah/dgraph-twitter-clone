{"version":3,"sources":["../packages/dgraph-query-manager/src/models/Tweet.ts"],"names":[],"mappings":"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","file":"Tweet.js","sourcesContent":["// Lib\r\nimport * as faker from 'faker';    \r\nimport * as twitter from 'twitter-text';\r\n// Local\r\nimport config from '../config';\r\nimport { \r\n    BaseModel, \r\n    BaseModelInterface,\r\n    Hashtag,\r\n    Uid,\r\n    User } from '../models';\r\n\r\nexport interface TweetInterface extends BaseModelInterface {\r\n  'tweet.createdAt': Date | string;\r\n  'tweet.favoriteCount'?: number;\r\n  'tweet.favorited': false;\r\n  'tweet.hashtag'?: Hashtag[];\r\n  'tweet.inReplyToStatusId'?: Uid;\r\n  'tweet.inReplyToUserId'?: Uid;\r\n  'tweet.isQuoteStatus': false;\r\n  'tweet.quotedStatus'?: Tweet;\r\n  'tweet.retweetCount'?: number;\r\n  'tweet.retweeted': false;\r\n  'tweet.text': string;\r\n  'tweet.user': User;\r\n}\r\n\r\nexport class Tweet extends BaseModel<Tweet> implements TweetInterface {\r\n  /**\r\n   * UTC time when this Tweet was created.\r\n   * @type {Date}\r\n   */\r\n  'tweet.createdAt': Date = new Date();\r\n\r\n  /**\r\n   * Collection of hashtags included in this Tweet, if applicable.\r\n   * @type {?Hashtag[]}\r\n   */\r\n  'tweet.hashtag'?: Hashtag[];\r\n\r\n  /**\r\n   * Indicates approximately how many times this Tweet has been liked by Twitter users.\r\n   * @type {?number}\r\n   */\r\n  'tweet.favoriteCount' = 0;\r\n\r\n  /**\r\n   * Indicates whether this Tweet has been favorited by the authenticating user.\r\n   * @type {boolean}\r\n   */\r\n  'tweet.favorited': false;\r\n\r\n  /**\r\n   * If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet’s ID.\r\n   * @type {?Uid}\r\n   */\r\n  'tweet.inReplyToStatusId'?: Uid;\r\n\r\n  /**\r\n   * If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet’s author ID. This will not necessarily always be the user directly mentioned in the Tweet.\r\n   * @type {?Uid}\r\n   */\r\n  'tweet.inReplyToUserId'?: Uid;\r\n\r\n  /**\r\n   * Indicates whether this is a Quoted Tweet.\r\n   * @type {boolean}\r\n   */\r\n  'tweet.isQuoteStatus': false;\r\n\r\n  /**\r\n   * Quoted Tweet, if applicable.\r\n   * @type {?Tweet}\r\n   */\r\n  'tweet.quotedStatus'?: Tweet;\r\n\r\n  /**\r\n   * Number of times this Tweet has been retweeted.\r\n   * @type {number}\r\n   */\r\n  'tweet.retweetCount' = 0;\r\n\r\n  /**\r\n   * Indicates whether this Tweet has been liked by the authenticating user.\r\n   * @type {boolean}\r\n   */\r\n  'tweet.retweeted': false;\r\n\r\n  /**\r\n   * The actual UTF-8 text of the status upsert.\r\n   * @type {string}\r\n   */\r\n  'tweet.text': string;\r\n\r\n  /**\r\n   * The user who posted this Tweet.\r\n   * @type {User}\r\n   */\r\n  'tweet.user': User;\r\n\r\n  constructor(params: Partial<Tweet> = {}) {\r\n    super(params);\r\n    // Override defaults\r\n    Object.assign(this, Tweet.deserialize(params));\r\n  }\r\n\r\n  /**\r\n   * Deserialize Dgraph form of Tweet object.\r\n   * @param {Partial<any | Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  static deserialize<Tweet>(params: Partial<Tweet | any> = {}): Partial<Tweet> {\r\n    params = super.deserialize(params);\r\n    // Dates\r\n    if (params['tweet.createdAt'])\r\n      params['tweet.createdAt'] = new Date(params['tweet.createdAt']);\r\n    // User\r\n    if (params['tweet.user']) {\r\n      params['tweet.user'] = new User(params['tweet.user']);\r\n    }\r\n    // Hashtags\r\n    if (params['tweet.hashtag']) {\r\n      if (Array.isArray(params['tweet.hashtag'])) {\r\n        params['tweet.hashtag'] = params['tweet.hashtag'].map(\r\n          hashtag => new Hashtag(hashtag)\r\n        );\r\n      } else {\r\n        params['tweet.hashtag'] = [new Hashtag(params['tweet.hashtag'])];\r\n      }\r\n    }\r\n    // Uids\r\n    if (params['tweet.inReplyToStatusId'])\r\n      params['tweet.inReplyToStatusId'] = new Uid(\r\n        params['tweet.inReplyToStatusId']\r\n      );\r\n    if (params['tweet.inReplyToUserId'])\r\n      params['tweet.inReplyToUserId'] = new Uid(\r\n        params['tweet.inReplyToUserId']\r\n      );\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Parses Tweet text and extracts Hashtags.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Partial<Tweet>}\r\n   */\r\n  static extractHashtags(params: Partial<Tweet> = {}): Partial<Tweet> {\r\n    const text = params['tweet.text'];\r\n    // Ensure valid tweet\r\n    if (text && text.length > 0 && !twitter.isInvalidTweet(text)) {\r\n      // Extract hashtags\r\n      const extractedHashtags = twitter.extractHashtagsWithIndices(text);\r\n      if (\r\n        extractedHashtags &&\r\n        Array.isArray(extractedHashtags) &&\r\n        extractedHashtags.length > 0\r\n      ) {\r\n        const hashtags: any[] = [];\r\n        for (const element of extractedHashtags) {\r\n          // Add new Hashtag instance\r\n          hashtags.push(Hashtag.createObject(element.hashtag, element.indices));\r\n        }\r\n        // Assign hashtags\r\n        params['tweet.hashtag'] = hashtags;\r\n      }\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Generates a Tweet instance for testing.\r\n   * @param {number} seed\r\n   * @returns {Tweet}\r\n   */\r\n  static generate(seed: number = config.faker.seed): Tweet {\r\n    return new Tweet(this.generateFakeParams(seed));\r\n  }\r\n\r\n  /**\r\n   * Generates a mockup Tweet object for testing.\r\n   * @param {number} seed\r\n   * @returns {Partial<Tweet>}\r\n   */\r\n  static generateFakeParams(seed: number = config.faker.seed): Partial<Tweet> {\r\n    // Set seed base.\r\n    faker.seed(seed);\r\n    return {\r\n      'tweet.favoriteCount': faker.random.number(),\r\n      'tweet.favorited': faker.random.boolean(),\r\n      // 'tweet.hashtag'?: [Hashtag];\r\n      // 'tweet.inReplyToStatusId': new Uid(123),\r\n      // 'tweet.inReplyToUserId': new Uid(456),\r\n      'tweet.isQuoteStatus': faker.random.boolean(),\r\n      // 'tweet.quotedStatus'?: Tweet,\r\n      'tweet.retweetCount': faker.random.number(),\r\n      'tweet.retweeted': faker.random.boolean(),\r\n      'tweet.text': faker.lorem.sentence(),\r\n      // 'tweet.user':               new User({\r\n      //     uid: new Uid(678)\r\n      // }),\r\n      'tweet.user': User.generate()\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates hashtags from passed text field or 'tweet.text' property, using twitter-text lib.\r\n   * @param text\r\n   */\r\n  getHashtags(text: string) {\r\n    return twitter.extractHashtagsWithIndices(text ? text : this['tweet.text']);\r\n  }\r\n\r\n  /**\r\n   * Performs all steps of async Tweet creation.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  static async load(params: Partial<Tweet> = {}): Promise<Partial<Tweet>> {\r\n    // Combine paramTypes with default properties.\r\n    params = this.injectDefaults(params);\r\n    // Load child elements (e.g. User.load(['tweet.user']) )\r\n    params = await this.loadChildren(params);\r\n    // Serialize (e.g. convert fields to payload-compatible object)\r\n    params = await this.serialize(params);\r\n    // Perform mutation (e.g. upsert)\r\n    const serialization = await this.insert(params);\r\n    if (!params.uid) {\r\n      params.uid = new Uid(serialization);\r\n    }\r\n    // Deserialize (e.g. convert payload back to Models)\r\n    params = this.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Performs all steps of async Tweet creation.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  async load(params: Partial<Tweet> = {}): Promise<Partial<Tweet>> {\r\n    // Combine paramTypes with default properties.\r\n    params = Tweet.injectDefaults(params);\r\n    // Load child elements (e.g. User.load(['tweet.user']) )\r\n    params = await Tweet.loadChildren(params);\r\n    // Serialize (e.g. convert fields to payload-compatible object)\r\n    params = await Tweet.serialize(params);\r\n    // Perform mutation (e.g. upsert)\r\n    const serialization = await Tweet.insert(params);\r\n    params.uid = new Uid(serialization);\r\n    // Deserialize (e.g. convert payload back to Models)\r\n    params = Tweet.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Preprocessor that parses text, Hashtags, and User.  Invokes .create methods for each to ensure children exist.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  static async loadChildren(\r\n    params: Partial<Tweet> = {}\r\n  ): Promise<Partial<Tweet>> {\r\n    // Parse hashtags\r\n    params = this.extractHashtags(params);\r\n    // Create Hashtags\r\n    const hashtags = params['tweet.hashtag'];\r\n    if (hashtags && Array.isArray(hashtags) && hashtags.length > 0) {\r\n      params['tweet.hashtag'] = (await Hashtag.createMany(\r\n        hashtags\r\n      )) as Hashtag[];\r\n    }\r\n    // Create User\r\n    const user = params['tweet.user'];\r\n    if (user && Object.keys(user).length > 0) {\r\n      params['tweet.user'] = (await User.create(user)).response as User;\r\n    }\r\n    return params;\r\n  }\r\n}\r\n"]}