{"version":3,"sources":["../packages/dgraph-query-manager/src/models/Tweet.ts"],"names":[],"mappings":"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","file":"Tweet.d.ts","sourcesContent":["// Lib\r\nimport * as faker from 'faker';\r\nimport * as twitter from 'twitter-text';\r\n// Local\r\nimport config from '../config';\r\nimport { BaseModel, BaseModelInterface, Hashtag, Uid, User } from '../models';\r\nimport { getRandomEnumElement, weightedBoolean } from '../helpers/utility';\r\nimport logger from '../logger';\r\n\r\nexport interface TweetInterface extends BaseModelInterface {\r\n  'tweet.createdAt': Date | string;\r\n  'tweet.hashtag'?: Hashtag[];\r\n  'tweet.inReplyToStatusId'?: Uid;\r\n  'tweet.inReplyToUserId'?: Uid;\r\n  'tweet.isQuoteStatus': boolean;\r\n  'tweet.quotedStatus'?: Tweet;\r\n  'tweet.text': string;\r\n  'tweet.user': User;\r\n}\r\n\r\nexport enum FakerTweetTypes {\r\n  COMPANY_BS,\r\n  COMPANY_CATCH_PHRASE,\r\n  HACKER,\r\n  WORDS,\r\n  LOREM\r\n}\r\n\r\nexport class Tweet extends BaseModel<Tweet> implements TweetInterface {\r\n  /**\r\n   * UTC time when this Tweet was created.\r\n   * @type {Date}\r\n   */\r\n  'tweet.createdAt': Date = new Date();\r\n\r\n  /**\r\n   * Collection of hashtags included in this Tweet, if applicable.\r\n   * @type {?Hashtag[]}\r\n   */\r\n  'tweet.hashtag'?: Hashtag[];\r\n\r\n  /**\r\n   * If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet’s ID.\r\n   * @type {?Uid}\r\n   */\r\n  'tweet.inReplyToStatusId'?: Uid;\r\n\r\n  /**\r\n   * If the represented Tweet is a reply, this field will contain the integer representation of the original Tweet’s author ID. This will not necessarily always be the user directly mentioned in the Tweet.\r\n   * @type {?Uid}\r\n   */\r\n  'tweet.inReplyToUserId'?: Uid;\r\n\r\n  /**\r\n   * Indicates whether this is a Quoted Tweet.\r\n   * @type {boolean}\r\n   */\r\n  'tweet.isQuoteStatus' = false;\r\n\r\n  /**\r\n   * Quoted Tweet, if applicable.\r\n   * @type {?Tweet}\r\n   */\r\n  'tweet.quotedStatus'?: Tweet;\r\n\r\n  /**\r\n   * The actual UTF-8 text of the status upsert.\r\n   * @type {string}\r\n   */\r\n  'tweet.text': string;\r\n\r\n  /**\r\n   * The user who posted this Tweet.\r\n   * @type {User}\r\n   */\r\n  'tweet.user': User;\r\n\r\n  constructor(params: Partial<Tweet> = {}) {\r\n    super(params);\r\n    // Override defaults\r\n    Object.assign(this, Tweet.deserialize(params));\r\n  }\r\n\r\n  /**\r\n   * Deserialize Dgraph form of Tweet object.\r\n   * @param {Partial<any | Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  static deserialize<Tweet>(params: Partial<Tweet | any> = {}): Partial<Tweet> {\r\n    // Dates\r\n    if (params['tweet.createdAt'])\r\n      params['tweet.createdAt'] = new Date(params['tweet.createdAt']);\r\n    // User\r\n    if (params['tweet.user']) {\r\n      params['tweet.user'] = new User(params['tweet.user']);\r\n    }\r\n    // Hashtags\r\n    if (params['tweet.hashtag']) {\r\n      if (Array.isArray(params['tweet.hashtag'])) {\r\n        params['tweet.hashtag'] = params['tweet.hashtag'].map(\r\n          hashtag => new Hashtag(hashtag)\r\n        );\r\n      } else {\r\n        params['tweet.hashtag'] = [new Hashtag(params['tweet.hashtag'])];\r\n      }\r\n    }\r\n    // Uids\r\n    if (params['tweet.inReplyToStatusId'])\r\n      params['tweet.inReplyToStatusId'] = new Uid(\r\n        params['tweet.inReplyToStatusId']\r\n      );\r\n    if (params['tweet.inReplyToUserId'])\r\n      params['tweet.inReplyToUserId'] = new Uid(\r\n        params['tweet.inReplyToUserId']\r\n      );\r\n\r\n    params = super.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Parses Tweet text and extracts Hashtags.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Partial<Tweet>}\r\n   */\r\n  static extractHashtags(params: Partial<Tweet> = {}): Partial<Tweet> {\r\n    const text = params['tweet.text'];\r\n    // Ensure valid tweet\r\n    if (text && text.length > 0 && !twitter.isInvalidTweet(text)) {\r\n      // Extract hashtags\r\n      const extractedHashtags = twitter.extractHashtagsWithIndices(text);\r\n      if (\r\n        extractedHashtags &&\r\n        Array.isArray(extractedHashtags) &&\r\n        extractedHashtags.length > 0\r\n      ) {\r\n        const hashtags: any[] = [];\r\n        for (const element of extractedHashtags) {\r\n          // Add new Hashtag instance\r\n          hashtags.push(Hashtag.createObject(element.hashtag, element.indices));\r\n        }\r\n        // Assign hashtags\r\n        params['tweet.hashtag'] = hashtags;\r\n      }\r\n    }\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Generates a Tweet instance for testing.\r\n   * @param {number} seed\r\n   * @param params\r\n   * @param mention\r\n   * @returns {Tweet}\r\n   */\r\n  static generate(\r\n    seed: number = config.faker.seed,\r\n    params?: Partial<User>,\r\n    mention?: User | User[]\r\n  ): Tweet {\r\n    return new Tweet(this.generateFakeParams(seed, params, mention));\r\n  }\r\n\r\n  /**\r\n   * Generates a mockup Tweet object for testing.\r\n   * @param {number} seed\r\n   * @param params\r\n   * @param mention\r\n   * @returns {Partial<Tweet>}\r\n   */\r\n  static generateFakeParams(\r\n    seed: number = config.faker.seed,\r\n    params?: Partial<User>,\r\n    mention?: User | User[]\r\n  ): Partial<Tweet> {\r\n    // Set seed base.\r\n    faker.seed(seed);\r\n    const max = 500;\r\n    return {\r\n      'tweet.isQuoteStatus': faker.random.boolean(),\r\n      'tweet.text': this.generateRandomTweetText(seed, mention),\r\n      'tweet.user': User.generate(),\r\n      ...params\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generates random tweet text.\r\n   * @param seed\r\n   * @param mention\r\n   */\r\n  static generateRandomTweetText(\r\n    seed: number = config.faker.seed,\r\n    mention?: User | User[]\r\n  ): string {\r\n    const type: FakerTweetTypes = getRandomEnumElement(FakerTweetTypes);\r\n    let result;\r\n    switch (type) {\r\n      case FakerTweetTypes.COMPANY_BS:\r\n        result = Tweet.getValidTweetString(\r\n          [\r\n            faker.company.bsAdjective(),\r\n            faker.company.bsBuzz(),\r\n            faker.company.bsNoun()\r\n          ],\r\n          [\r\n            faker.company.catchPhraseAdjective(),\r\n            faker.company.catchPhraseAdjective()\r\n          ],\r\n          mention\r\n        );\r\n        return result;\r\n      case FakerTweetTypes.COMPANY_CATCH_PHRASE:\r\n        result = Tweet.getValidTweetString(\r\n          [\r\n            faker.company.catchPhraseAdjective(),\r\n            faker.company.catchPhraseDescriptor(),\r\n            faker.company.catchPhraseNoun()\r\n          ],\r\n          [faker.company.bsAdjective(), faker.company.bsAdjective()],\r\n          mention\r\n        );\r\n        return result;\r\n      case FakerTweetTypes.HACKER:\r\n        result = Tweet.getValidTweetString(\r\n          faker.hacker.phrase(),\r\n          [faker.hacker.ingverb(), faker.hacker.adjective()],\r\n          mention\r\n        );\r\n        return result;\r\n      case FakerTweetTypes.LOREM:\r\n        result = Tweet.getValidTweetString(\r\n          faker.lorem.sentence(),\r\n          [faker.company.bsAdjective(), faker.lorem.word()],\r\n          mention\r\n        );\r\n        return result;\r\n      case FakerTweetTypes.WORDS:\r\n        result = Tweet.getValidTweetString(\r\n          [\r\n            faker.random.word(),\r\n            faker.random.word(),\r\n            faker.random.word(),\r\n            faker.random.word()\r\n          ],\r\n          [faker.random.word(), faker.random.word()],\r\n          mention\r\n        );\r\n        return result;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates hashtags from passed text field or 'tweet.text' property, using twitter-text lib.\r\n   * @param text\r\n   */\r\n  getHashtags(text: string) {\r\n    return twitter.extractHashtagsWithIndices(text ? text : this['tweet.text']);\r\n  }\r\n\r\n  /**\r\n   * Generates a random string suitable for a Tweet text field.\r\n   * @param word\r\n   * @param hashtag\r\n   * @param mention\r\n   */\r\n  static getValidTweetString(\r\n    word: string | string[],\r\n    hashtag?: number | string | string[],\r\n    mention?: User | User[]\r\n  ): string {\r\n    const result: string[] = [];\r\n\r\n    if (mention) {\r\n      if (mention instanceof Array && mention.length > 0) {\r\n        result.push(\r\n          mention.map(user => `@${user['user.screenName']}`).join(' ')\r\n        );\r\n      } else if (mention instanceof User) {\r\n        result.push(`@${mention['user.screenName']}`);\r\n      }\r\n    }\r\n\r\n    if (Array.isArray(word) && word.length > 0) {\r\n      result.push(word.join(' '));\r\n    } else if (typeof word === 'string') {\r\n      result.push(word);\r\n    }\r\n\r\n    if (hashtag) {\r\n      if (typeof hashtag === 'number') {\r\n        const tempTags: string[] = [];\r\n        // Generate number of hashtags\r\n        for (let count = 0; count <= hashtag; count++) {\r\n          tempTags.push(`#${faker.company.bsAdjective}`);\r\n        }\r\n        // Join with space delimiter.\r\n        result.push(tempTags.join(' '));\r\n      } else if (Array.isArray(hashtag) && hashtag.length > 0) {\r\n        result.push(hashtag.map(tag => `#${tag}`).join(' '));\r\n      } else if (typeof hashtag === 'string') {\r\n        result.push(`#${hashtag}`);\r\n      }\r\n    }\r\n\r\n    return result.join(' ');\r\n  }\r\n\r\n  /**\r\n   * Performs all steps of async Tweet creation.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  static async load(params: Partial<Tweet> = {}): Promise<Partial<Tweet>> {\r\n    // Combine paramTypes with default properties.\r\n    params = this.injectDefaults(params);\r\n    // Load child elements (e.g. User.load(['tweet.user']) )\r\n    params = await this.loadChildren(params);\r\n    // Serialize (e.g. convert fields to payload-compatible object)\r\n    params = await this.serialize(params);\r\n    // Perform mutation (e.g. upsert)\r\n    const serialization = await this.insert(params);\r\n    if (!params.uid) {\r\n      params.uid = new Uid(serialization);\r\n    }\r\n    // Deserialize (e.g. convert payload back to Models)\r\n    params = this.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Performs all steps of async Tweet creation.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  async load(params: Partial<Tweet> = {}): Promise<Partial<Tweet>> {\r\n    // Combine paramTypes with default properties.\r\n    params = Tweet.injectDefaults(params);\r\n    // Load child elements (e.g. User.load(['tweet.user']) )\r\n    params = await Tweet.loadChildren(params);\r\n    // Serialize (e.g. convert fields to payload-compatible object)\r\n    params = await Tweet.serialize(params);\r\n    // Perform mutation (e.g. upsert)\r\n    const serialization = await Tweet.insert(params);\r\n    params.uid = new Uid(serialization);\r\n    // Deserialize (e.g. convert payload back to Models)\r\n    params = Tweet.deserialize(params);\r\n    return params;\r\n  }\r\n\r\n  /**\r\n   * Preprocessor that parses text, Hashtags, and User.  Invokes .create methods for each to ensure children exist.\r\n   * @param {Partial<Tweet>} params\r\n   * @returns {Promise<Partial<Tweet>>}\r\n   */\r\n  static async loadChildren(\r\n    params: Partial<Tweet> = {}\r\n  ): Promise<Partial<Tweet>> {\r\n    // Only create Hashtags if no Hashtags exist\r\n    if (!params['tweet.hashtag'] || params['tweet.hashtag'].length === 0) {\r\n      // Parse hashtags\r\n      params = this.extractHashtags(params);\r\n      // Create Hashtags\r\n      const hashtags = params['tweet.hashtag'];\r\n      if (hashtags && Array.isArray(hashtags) && hashtags.length > 0) {\r\n        params['tweet.hashtag'] = (await Hashtag.createMany(\r\n          hashtags\r\n        )) as Hashtag[];\r\n      }\r\n    }\r\n    // Create User\r\n    const user = params['tweet.user'];\r\n    if (user && Object.keys(user).length > 0) {\r\n      params['tweet.user'] = (await User.create(user)).response as User;\r\n    }\r\n    return params;\r\n  }\r\n}\r\n"]}