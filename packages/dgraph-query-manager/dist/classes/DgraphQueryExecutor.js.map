{"version":3,"sources":["../packages/dgraph-query-manager/src/classes/DgraphQueryExecutor.ts"],"names":[],"mappings":";;AAAA,0CAAiE;AACjE,wCAA2C;AAE3C,sCAA+B;AAC/B,iCAA0B;AAC1B,sCAA+B;AAE/B,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,6DAAG,CAAA;IACH,uEAAQ,CAAA;IACR,mEAAM,CAAA;AACR,CAAC,EAJW,oBAAoB,GAApB,4BAAoB,KAApB,4BAAoB,QAI/B;AAQD,IAAY,wBAKX;AALD,WAAY,wBAAwB;IAClC,yEAAK,CAAA;IACL,yFAAa,CAAA;IACb,uEAAI,CAAA;IACJ,mFAAU,CAAA;AACZ,CAAC,EALW,wBAAwB,GAAxB,gCAAwB,KAAxB,gCAAwB,QAKnC;AAED,MAAa,mBAAmB;IAK9B,YACE,KAAY,EACZ,MAAe,EACf,UAAU,GAAG,KAAK,EAClB,OAAuB;QARzB,eAAU,GAAG,KAAK,CAAC;QAUjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;QAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,MAAM;YAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,MAAM,CAAC;QACvC,IAAI,KAAK,CAAC,cAAc,EAAE,EAAE;YAC1B,KAAK,CAAC,kBAAkB,EAAE,CAAC;SAC5B;IACH,CAAC;IAED;;;OAGG;IACH,MAAM,CAAC,OAAO,CAAC,MAA0C;QACvD,OAAO,IAAI,mBAAmB,CAC5B,MAAM,CAAC,KAAK,EACZ,MAAM,CAAC,KAAK,CAAC,MAAM,EACnB,MAAM,CAAC,UAAU,EACjB,MAAM,CAAC,OAAO,CACf,CAAC;IACJ,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,OAAO,CACX,iBAAuC,gBAAM,CAAC,cAAc;QAE5D,IAAI,aAAa,CAAC;QAClB,IAAI,cAAc,KAAK,oBAAoB,CAAC,QAAQ,EAAE;YACpD,aAAa,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;SACpD;aAAM,IAAI,cAAc,KAAK,oBAAoB,CAAC,GAAG,EAAE;YACtD,aAAa,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;SACpD;aAAM;YACL,qBAAqB;YACrB,aAAa,GAAG,MAAM,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;SAC/D;QAED,qDAAqD;QACrD,MAAM,IAAI,GACR,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC;YAC3C,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI;YACjB,CAAC,CAAC,IAAI,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;QAE1B,IAAI,aAAa,CAAC,QAAQ,EAAE;YAC1B,IAAI,gBAAgB,GAAU,EAAE,CAAC;YACjC,KAAK,MAAM,MAAM,IAAI,IAAI,EAAE;gBACzB,IAAI,cAAc,GAAG,aAAa,CAAC,QAAQ,CAAC;gBAC5C,KAAK,MAAM,KAAK,IAAI,MAAM,EAAE;oBAC1B,IAAI,cAAc,CAAC,KAAK,CAAC,EAAE;wBACzB,cAAc,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;qBACxC;iBACF;gBACD,oFAAoF;gBACpF,gBAAgB,GAAG,gBAAgB,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;aAC5D;YACD,aAAa,CAAC,OAAO,GAAG,MAAM,IAAI,CAAC,KAAK,CAAC,UAAU,SAAS,CAAC;YAE7D,iBAAiB;YACjB,aAAa,CAAC,QAAQ,GAAG,4BAAa,CAAC,aAAa,CAClD,gBAAgB,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,aAAa,CAAC,QAAQ,CAC7D,CAAC;YACF,IACE,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC;gBACtC,CAAC,KAAK,CAAC,OAAO,CAAC,aAAa,CAAC,QAAQ,CAAC;oBACpC,aAAa,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,EACpC;gBACA,aAAa,CAAC,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,SAAS,CAAC;gBAC1D,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;aAC9B;SACF;QAED,OAAO,aAAa,CAAC;IACvB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB;QACzB,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,QAAQ,GAAG,IAAI,uBAAa,CAAC;YACjC,OAAO,EAAE,sBACP,IAAI,CAAC,KAAK,CAAC,UACb,wBAAwB;YACxB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;YACzB,GAAG;SACJ,CAAC,CAAC;QAEH,UAAU;QACV,MAAM,GAAG,GAAG,GAAG,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,MAAM,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IACnE,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IACpB,QAAQ,GAAG,EAAE,CAAC;QAEd,IAAI;YACF,MAAM,aAAa,GAAG,MAAM,eAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;YAC3C,gBAAM,CAAC,IAAI,CACT,uDAAuD,EACvD,aAAa,CAAC,IAAI,CACnB,CAAC;YACF,QAAQ,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;YAChD,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,gBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACpB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;SACxB;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;OAEG;IACH,KAAK,CAAC,qBAAqB;QACzB,MAAM,QAAQ,GAAG,IAAI,uBAAa,CAAC;YACjC,OAAO,EAAE,sBACP,IAAI,CAAC,KAAK,CAAC,UACb,wBAAwB;YACxB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;SAC1B,CAAC,CAAC;QAEH,UAAU;QACV,MAAM,GAAG,GAAG,GAAG,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,QAAQ,MAAM,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,IACnE,gBAAM,CAAC,MAAM,CAAC,GAAG,CAAC,IACpB,WAAW,CAAC;QAEZ,IAAI;YACF,MAAM,aAAa,GAAG,MAAM,eAAK,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;YAClD,gBAAM,CAAC,IAAI,CACT,uDAAuD,EACvD,aAAa,CAAC,IAAI,CACnB,CAAC;YACF,QAAQ,CAAC,QAAQ,GAAG,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC;YAChD,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC;SACzB;QAAC,OAAO,KAAK,EAAE;YACd,gBAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;YACpB,QAAQ,CAAC,KAAK,GAAG,KAAK,CAAC;SACxB;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,oBAAoB,CAAC,OAAuB;QAChD,MAAM,OAAO,GAAG,IAAI,4BAAa,EAAE,CAAC;QACpC,IAAI,QAAQ,GAAG,IAAI,uBAAa,CAAC;YAC/B,OAAO,EAAE,sBACP,IAAI,CAAC,KAAK,CAAC,UACb,gCAAgC;YAChC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;SAC1B,CAAC,CAAC;QAEH,yCAAyC;QACzC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC;QAEvC,IAAI,IAAI,CAAC,UAAU,EAAE;YACnB,QAAQ,GAAG,MAAM,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;SAC1C;aAAM;YACL,IAAI,IAAI,CAAC,KAAK,CAAC,UAAU,EAAE;gBACzB,QAAQ,GAAG,MAAM,OAAO,CAAC,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;aACpE;iBAAM;gBACL,QAAQ,GAAG,MAAM,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;aACzC;SACF;QACD,OAAO,QAAQ,CAAC;IAClB,CAAC;CACF;AAnLD,kDAmLC","file":"DgraphQueryExecutor.js","sourcesContent":["import { DgraphAdapterHttp as DgraphAdapter } from '../adapters';\r\nimport { Serialization } from '../classes';\r\nimport { Query } from './Query';\r\nimport logger from '../logger';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\n\r\nexport enum DgraphConnectionType {\r\n  API,\r\n  REST_API,\r\n  DIRECT\r\n}\r\n\r\nexport interface DgraphQueryExecutorInterface {\r\n  isMutation: boolean;\r\n  query: Query;\r\n  request?: Serialization;\r\n}\r\n\r\nexport enum DgraphQueryExecutorModes {\r\n  Query,\r\n  QueryWithVars,\r\n  Json,\r\n  DeleteJson\r\n}\r\n\r\nexport class DgraphQueryExecutor implements DgraphQueryExecutorInterface {\r\n  isMutation = false;\r\n  query: Query;\r\n  request?: Serialization;\r\n\r\n  constructor(\r\n    query: Query,\r\n    params?: object,\r\n    isMutation = false,\r\n    request?: Serialization\r\n  ) {\r\n    this.isMutation = isMutation;\r\n    this.query = query;\r\n    this.request = request;\r\n    if (params) this.query.params = params;\r\n    if (query.validateParams()) {\r\n      query.injectCustomParams();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Builds a DgraphQueryExecutor instance from partial params.\r\n   * @param params\r\n   */\r\n  static factory(params: Partial<DgraphQueryExecutor> | any) {\r\n    return new DgraphQueryExecutor(\r\n      params.query,\r\n      params.query.params,\r\n      params.isMutation,\r\n      params.request\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Execute Dgraph query based on instance properties and configuration.\r\n   */\r\n  async execute(\r\n    connectionType: DgraphConnectionType = config.connectionType\r\n  ): Promise<Serialization> {\r\n    let serialization;\r\n    if (connectionType === DgraphConnectionType.REST_API) {\r\n      serialization = await this.executeRestApiRequest();\r\n    } else if (connectionType === DgraphConnectionType.API) {\r\n      serialization = await this.executeJsonApiRequest();\r\n    } else {\r\n      // Default to direct.\r\n      serialization = await this.executeDirectRequest(this.request);\r\n    }\r\n\r\n    // Assume a singular array of 'data' if not included.\r\n    const tree =\r\n      this.query.tree && this.query.tree.length > 0\r\n        ? this.query.tree\r\n        : new Array(['data']);\r\n\r\n    if (serialization.response) {\r\n      let combinedResponse: any[] = [];\r\n      for (const branch of tree) {\r\n        let branchResponse = serialization.response;\r\n        for (const stick of branch) {\r\n          if (branchResponse[stick]) {\r\n            branchResponse = branchResponse[stick];\r\n          }\r\n        }\r\n        // Combines all previous arrays with new response array to generate full result set.\r\n        combinedResponse = combinedResponse.concat(branchResponse);\r\n      }\r\n      serialization.message = `No ${this.query.objectType} found.`;\r\n\r\n      // Flatten arrays\r\n      serialization.response = DgraphAdapter.flattenArrays(\r\n        combinedResponse ? combinedResponse : serialization.response\r\n      );\r\n      if (\r\n        !Array.isArray(serialization.response) ||\r\n        (Array.isArray(serialization.response) &&\r\n          serialization.response.length > 0)\r\n      ) {\r\n        serialization.message = `${this.query.objectType} found.`;\r\n        serialization.success = true;\r\n      }\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Makes a REST API query request via explicit `/api/route/endpoints`.\r\n   */\r\n  async executeRestApiRequest(): Promise<Serialization> {\r\n    const uri = this.query.uri(this.query.params);\r\n    const response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via REST API request.`,\r\n      request: this.query.query,\r\n      uri\r\n    });\r\n\r\n    // Get URL\r\n    const url = `${config.dgraph.api.protocol}://${config.dgraph.api.host}:${\r\n      config.dgraph.api.port\r\n    }/api/${uri}`;\r\n\r\n    try {\r\n      const axiosResponse = await axios.get(url);\r\n      logger.info(\r\n        `DgraphQueryExecutor.executeRestApiRequest response %o`,\r\n        axiosResponse.data\r\n      );\r\n      response.response = axiosResponse.data.response;\r\n      response.success = true;\r\n    } catch (error) {\r\n      logger.error(error);\r\n      response.error = error;\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Makes an API query request via JSON payload.\r\n   */\r\n  async executeJsonApiRequest(): Promise<Serialization> {\r\n    const response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via JSON API request.`,\r\n      request: this.query.query\r\n    });\r\n\r\n    // Get URL\r\n    const url = `${config.dgraph.api.protocol}://${config.dgraph.api.host}:${\r\n      config.dgraph.api.port\r\n    }/api/json`;\r\n\r\n    try {\r\n      const axiosResponse = await axios.post(url, this);\r\n      logger.info(\r\n        `DgraphQueryExecutor.executeJsonApiRequest response %o`,\r\n        axiosResponse.data\r\n      );\r\n      response.response = axiosResponse.data.response;\r\n      response.success = true;\r\n    } catch (error) {\r\n      logger.error(error);\r\n      response.error = error;\r\n    }\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Makes a direct request via GraphQL+-.\r\n   * @param request\r\n   */\r\n  async executeDirectRequest(request?: Serialization): Promise<Serialization> {\r\n    const adapter = new DgraphAdapter();\r\n    let response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via direct GraphQL+- request.`,\r\n      request: this.query.query\r\n    });\r\n\r\n    // Allow request to be optionally passed.\r\n    request = request ? request : response;\r\n\r\n    if (this.isMutation) {\r\n      response = await adapter.mutate(request);\r\n    } else {\r\n      if (this.query.paramTypes) {\r\n        response = await adapter.queryWithVars(request, this.query.params);\r\n      } else {\r\n        response = await adapter.query(request);\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n}\r\n"]}