{"version":3,"sources":["../packages/dgraph-query-manager/src/classes/DgraphQueryExecutor.ts"],"names":[],"mappings":"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","file":"DgraphQueryExecutor.js","sourcesContent":["import { DgraphAdapterHttp as DgraphAdapter } from '../adapters';\r\nimport { Serialization } from '../classes';\r\nimport { Query } from './Query';\r\nimport logger from '../logger';\r\nimport axios from 'axios';\r\nimport config from '../config';\r\nimport { DgraphConnectionType } from '../config/development';\r\n\r\nexport interface DgraphQueryExecutorInterface {\r\n  isMutation: boolean;\r\n  params?: object;\r\n  query: Query;\r\n  request?: Serialization;\r\n}\r\n\r\nexport enum DgraphQueryExecutorModes {\r\n  Query,\r\n  QueryWithVars,\r\n  Json,\r\n  DeleteJson\r\n}\r\n\r\nexport class DgraphQueryExecutor implements DgraphQueryExecutorInterface {\r\n  isMutation = false;\r\n  params?: object;\r\n  query: Query;\r\n  request?: Serialization;\r\n\r\n  constructor(\r\n    query: Query,\r\n    params?: object,\r\n    isMutation = false,\r\n    request?: Serialization\r\n  ) {\r\n    this.isMutation = isMutation;\r\n    this.params = params;\r\n    this.query = query;\r\n    this.request = request;\r\n    query.validateParams(params);\r\n  }\r\n\r\n  /**\r\n   * Execute Dgraph query based on instance properties and configuration.\r\n   */\r\n  async execute(): Promise<Serialization> {\r\n    let serialization;\r\n    if (config.connectionType === DgraphConnectionType.API) {\r\n      serialization = await this.executeApiRequest();\r\n    } else {\r\n      // Default to direct.\r\n      serialization = await this.executeDirectRequest(this.request);\r\n    }\r\n\r\n    // Assume singular array of 'data' if not included.\r\n    const tree = this.query.tree ? this.query.tree : ['data'];\r\n\r\n    if (serialization.response) {\r\n      let tempResponse = serialization.response;\r\n      for (const branch of tree) {\r\n        if (tempResponse[branch]) {\r\n          tempResponse = tempResponse[branch];\r\n        }\r\n      }\r\n      serialization.message = `No ${this.query.objectType} found.`;\r\n      serialization.response = tempResponse;\r\n      if (\r\n        !Array.isArray(serialization.response) ||\r\n        (Array.isArray(serialization.response) &&\r\n          serialization.response.length > 0)\r\n      ) {\r\n        serialization.message = `${this.query.objectType} found.`;\r\n        serialization.success = true;\r\n      }\r\n    }\r\n\r\n    return serialization;\r\n  }\r\n\r\n  /**\r\n   * Makes an API query request.\r\n   * @param request\r\n   */\r\n  async executeApiRequest(): Promise<Serialization> {\r\n    let response = new Serialization({\r\n      message: `Failed to retrieve ${\r\n        this.query.objectType\r\n      } via direct request.`,\r\n      request: this.query.query\r\n    });\r\n\r\n    // Get URL\r\n    const url = `${config.dgraph.api.protocol}://${config.dgraph.api.host}:${\r\n      config.dgraph.api.port\r\n    }/api/${this.query.uri(this.params)}`;\r\n\r\n    // TODO: Change HTTP verb dynamically based on Query.\r\n    axios\r\n      .get(url)\r\n      .then(axiosResponse => {\r\n        logger.info(\r\n          `DgraphQueryExecutor.executeDirect response %o`,\r\n          axiosResponse.data.response\r\n        );\r\n        response.response = axiosResponse.data.response;\r\n        return response;\r\n      })\r\n      .catch(exception => {\r\n        logger.error(exception);\r\n        response.error = exception;\r\n        return response;\r\n      });\r\n\r\n    return response;\r\n  }\r\n\r\n  /**\r\n   * Makes a direct request.\r\n   * @param request\r\n   */\r\n  async executeDirectRequest(request?: Serialization): Promise<Serialization> {\r\n    const adapter = new DgraphAdapter();\r\n    let response = new Serialization({\r\n      message: `Failed to retrieve ${this.query.objectType} via API request.`,\r\n      request: this.query.query\r\n    });\r\n\r\n    // Allow request to be optionally passed.\r\n    request = request ? request : response;\r\n\r\n    if (this.isMutation) {\r\n      response = await adapter.mutate(request);\r\n    } else {\r\n      if (this.query.paramTypes) {\r\n        response = await adapter.queryWithVars(request, this.query.params);\r\n      } else {\r\n        response = await adapter.query(request);\r\n      }\r\n    }\r\n    return response;\r\n  }\r\n}\r\n"]}