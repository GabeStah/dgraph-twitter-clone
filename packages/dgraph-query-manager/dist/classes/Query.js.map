{"version":3,"sources":["../packages/dgraph-query-manager/src/classes/Query.ts"],"names":[],"mappings":"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","file":"Query.js","sourcesContent":["import logger from '../logger';\r\nimport { ParamType } from './ParamType';\r\n\r\nexport interface QueryInterface {\r\n  objectType: string;\r\n  params: object;\r\n  paramTypes?: ParamType<any>[];\r\n  query: string;\r\n  route: string;\r\n  tree?: string[];\r\n}\r\n\r\n/**\r\n * Helper class for creating queries to be executed by Dgraph via dgraph-adapter.\r\n */\r\nexport class Query implements QueryInterface {\r\n  private _objectType: string;\r\n  get objectType(): string {\r\n    // Set initial value if not specified.\r\n    if (!this._objectType) this.objectType = this.getObjectTypeFromRoute();\r\n    return this._objectType;\r\n  }\r\n\r\n  set objectType(value: string) {\r\n    this._objectType = value;\r\n  }\r\n\r\n  private _params: object = {};\r\n  get params(): object {\r\n    return this._params;\r\n  }\r\n\r\n  set params(value: object) {\r\n    this._params = value;\r\n  }\r\n\r\n  paramTypes?: ParamType<any>[];\r\n  query: string;\r\n  route: string;\r\n  tree?: string[];\r\n\r\n  /**\r\n   * @param query - Query string.\r\n   * @param route - API route.\r\n   * @param paramTypes? - Collection of valid parameter types.\r\n   * @param tree? - Results tree definition.\r\n   */\r\n  constructor(\r\n    query: string,\r\n    route: string,\r\n    paramTypes?: ParamType<any>[],\r\n    tree?: string\r\n  ) {\r\n    this.paramTypes = paramTypes;\r\n    this.parseTree(tree);\r\n    this.query = query;\r\n    this.route = route;\r\n  }\r\n\r\n  /**\r\n   * Parses the route string and obtains assumed retrieved object type.\r\n   * e.g. '/tweets/:uid' returns 'tweets'\r\n   */\r\n  private getObjectTypeFromRoute(): string {\r\n    const value = this.route.split('/')[1];\r\n    return value ? value : 'Unknown';\r\n  }\r\n\r\n  /**\r\n   * Splits the passed period-delimited tree string into array.\r\n   * @param tree\r\n   */\r\n  private parseTree(tree?: string) {\r\n    if (!tree) return;\r\n    this.tree = tree.split('.');\r\n  }\r\n\r\n  /**\r\n   * Generates the proper URI from route and passed params.\r\n   * @param params\r\n   */\r\n  uri(params?: object): string | undefined {\r\n    let newUri = this.route;\r\n    if (params) {\r\n      // replace $ in params with :\r\n      Object.entries(params).forEach(([key, value]) => {\r\n        newUri = newUri.replace(key.replace('$', ':'), value);\r\n      });\r\n    }\r\n    return newUri;\r\n  }\r\n\r\n  /**\r\n   * Validates passed params with specified paramTypes, if applicable.\r\n   * @param params\r\n   */\r\n  validateParams(params: object | undefined) {\r\n    this.params = params ? params : this.params;\r\n    const paramTypes = this.paramTypes;\r\n    if (!this.params) {\r\n      if (paramTypes) {\r\n        logger.error(`No params found for query: ${this.query}`);\r\n        return false;\r\n      }\r\n    } else {\r\n      if (paramTypes) {\r\n        paramTypes.forEach(paramType => {\r\n          // Check that params contain this paramType key.\r\n          if (this.params.hasOwnProperty(paramType.key)) {\r\n            // Skip undefined or null\r\n            if (this.params[paramType.key]) {\r\n              // Checks that constructor type of parameter matches paramType.\r\n              if (\r\n                this.params[paramType.key].constructor.name !==\r\n                paramType.type.constructor.name\r\n              ) {\r\n                console.log(this.params);\r\n                console.log(paramTypes);\r\n                logger.error(\r\n                  `Param for key of (${\r\n                    paramType.key\r\n                  }) must match constructor paramType of (${\r\n                    paramType.type.constructor.name\r\n                  }).`\r\n                );\r\n                return false;\r\n              }\r\n            }\r\n          } else {\r\n            logger.error(\r\n              `Params must contain paramType key of (${paramType.key}).`\r\n            );\r\n            return false;\r\n          }\r\n        });\r\n      }\r\n    }\r\n    return true;\r\n  }\r\n}\r\n"]}